import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as t,f as s,o as a}from"./app-BNzxpuv9.js";const n={};function l(h,i){return a(),t("div",null,i[0]||(i[0]=[s(`<h1 id="advanced-features" tabindex="-1"><a class="header-anchor" href="#advanced-features"><span>Advanced Features</span></a></h1><p>This page explains the advanced editing features included in DyNode.</p><h2 id="expressions" tabindex="-1"><a class="header-anchor" href="#expressions"><span>Expressions</span></a></h2><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>This is a very early <strong>experimental</strong> feature and may change frequently in upcoming versions. It is recommended to back up your project before using it.</p></div><p>Press <kbd>0</kbd> to input an expression.</p><p>A valid expression is a meaningful statement composed of a series of operators, numbers, and variables, for example: <code>a=10+b*c</code>, <code>100&gt;90</code>, etc.</p><p>Expressions support the basic arithmetic operators <code>+,-,*,/,%</code>, bitwise operators <code>&lt;&lt;,&gt;&gt;,|,&amp;</code>, logical operators <code>&amp;&amp;,||,!</code>, relational operators <code>&gt;,&lt;,&gt;=,&lt;=,==,!=</code>, and the assignment operator <code>=</code>.</p><p>You can write expressions in a C-like syntax. Some valid expression examples are as follows:</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // a becomes 900</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">              // b becomes 900</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">           // b is assigned (a=20), right-associative</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">c</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       // c becomes (10*20)/20, left-associative</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can use expressions to batch modify the properties of all notes or selected notes.</p><p>The currently supported note property variables are listed in the table below:</p><table><thead><tr><th style="text-align:center;">Property</th><th style="text-align:center;">Function</th><th style="text-align:center;">Unit</th><th style="text-align:center;">Note Type Restriction</th></tr></thead><tbody><tr><td style="text-align:center;">time</td><td style="text-align:center;">The time the note occurs</td><td style="text-align:center;">ms</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">pos</td><td style="text-align:center;">The position of the note</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">wid</td><td style="text-align:center;">The width of the note</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">len</td><td style="text-align:center;">The duration of the note</td><td style="text-align:center;">ms</td><td style="text-align:center;">HOLD</td></tr><tr><td style="text-align:center;">htime</td><td style="text-align:center;">The head time of the note (for Hold)</td><td style="text-align:center;">ms</td><td style="text-align:center;">HOLD</td></tr><tr><td style="text-align:center;">etime</td><td style="text-align:center;">The tail time of the note (for Hold)</td><td style="text-align:center;">ms</td><td style="text-align:center;">HOLD</td></tr></tbody></table><p>The expression is computed independently on each note. The computation process is as follows:</p><ul><li>The expression’s variables are initialized based on the note’s properties.</li><li>The expression is evaluated, and the variables may change during computation.</li><li>The final values of the variables are used to update the note’s properties.</li></ul><p>In DyNode, multiple expressions are separated by <code>;</code> and are executed sequentially. All variables are stored as double‐precision floating-point numbers.</p><p>Note that some variables are restricted to certain note types; that is, they only affect specific types of notes. All computations will ignore SUB type notes (the tail notes of HOLD notes). See <a href="#modifying-hold-properties">Modifying HOLD Properties</a> for details.</p><p>Below are some valid examples of expressions, each on a separate line:</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">wid </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> wid </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                   // Double the width of the note</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pos </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2.5</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                       // Set the note position to 2.5</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> time </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> time </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">               // Increase the note time by 10ms (adding delay)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pos </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2.5</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pos</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">              // Mirror the note across the center at position 2.5</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> time </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> time </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; len </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> len </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.5</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // Speed up the chart by a factor of 1.5 (divide note times and HOLD durations by 1.5)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; time </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                // Define variable a and assign it to time</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="modifying-hold-properties" tabindex="-1"><a class="header-anchor" href="#modifying-hold-properties"><span>Modifying HOLD Properties</span></a></h3><p>All expression evaluations ignore SUB type notes. Instead, for HOLD type notes there are special property variables available:</p><table><thead><tr><th style="text-align:center;">Property</th><th style="text-align:center;">Function</th><th style="text-align:center;">Unit</th></tr></thead><tbody><tr><td style="text-align:center;">len</td><td style="text-align:center;">The duration of the note</td><td style="text-align:center;">ms</td></tr><tr><td style="text-align:center;">htime</td><td style="text-align:center;">The head time of the note</td><td style="text-align:center;">ms</td></tr><tr><td style="text-align:center;">etime</td><td style="text-align:center;">The tail time of the note</td><td style="text-align:center;">ms</td></tr></tbody></table><p>This means that modifying the <code>time</code> property of a HOLD note will not affect its duration; changing <code>time</code> effectively moves the entire HOLD note rather than adjusting its head and tail separately.</p><p>If you want to modify the head and tail separately, you need to change the <code>htime</code> and <code>etime</code> properties instead of <code>time</code>.</p><p>You may notice that these three properties can conflict; that is, if you modify <code>htime</code> and <code>etime</code>, then <code>len</code> would theoretically change. However, during expression evaluation, variables are not bound to each other – a change in one does not automatically update another.</p><p>In practice, we do not recommend including two HOLD-related variables in the same expression. The conflict resolution is as follows:</p><ul><li>If both <code>time</code> and <code>htime</code> are modified, the modification to <code>htime</code> takes precedence.</li><li>If both <code>len</code> and <code>etime</code> are modified, the modification to <code>len</code> takes precedence.</li></ul><p>Here are some valid examples of modifying HOLD properties:</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">htime </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> htime </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; etime </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> etime </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       // Increase the head time by 10ms and decrease the tail time by 10ms for all HOLD notes</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">len </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> len </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                                // Halve the duration of all HOLD notes</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">htime </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                                  // Set the head time of all HOLD notes to 100ms</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">htime </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; len </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                        // Equivalent to setting time and duration to 100ms</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28)]))}const p=e(n,[["render",l],["__file","advanced-edit.html.vue"]]),o=JSON.parse('{"path":"/en/guide/advanced-edit.html","title":"Advanced Features","lang":"en-US","frontmatter":{"description":"Advanced Features This page explains the advanced editing features included in DyNode. Expressions Warning This is a very early experimental feature and may change frequently in...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://dyn.iorinn.moe/guide/advanced-edit.html"}],["meta",{"property":"og:url","content":"https://dyn.iorinn.moe/en/guide/advanced-edit.html"}],["meta",{"property":"og:site_name","content":"DyNode"}],["meta",{"property":"og:title","content":"Advanced Features"}],["meta",{"property":"og:description","content":"Advanced Features This page explains the advanced editing features included in DyNode. Expressions Warning This is a very early experimental feature and may change frequently in..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-08T11:30:39.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-08T11:30:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Advanced Features\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-08T11:30:39.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Expressions","slug":"expressions","link":"#expressions","children":[{"level":3,"title":"Modifying HOLD Properties","slug":"modifying-hold-properties","link":"#modifying-hold-properties","children":[]}]}],"git":{"createdTime":1706253334000,"updatedTime":1739014239000,"contributors":[{"name":"Rin","username":"Rin","email":"31349569+NagaseIori@users.noreply.github.com","commits":2,"url":"https://github.com/Rin"}]},"readingTime":{"minutes":2.33,"words":699},"filePathRelative":"en/guide/advanced-edit.md","localizedDate":"January 26, 2024","autoDesc":true}');export{p as comp,o as data};
