import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as t,f as e,o as a}from"./app-Dnok6unx.js";const l={};function n(h,i){return a(),t("div",null,i[0]||(i[0]=[e(`<h1 id="高级功能" tabindex="-1"><a class="header-anchor" href="#高级功能"><span>高级功能</span></a></h1><p>本页面讲解 DyNode 包含的进阶编辑功能。</p><h2 id="表达式" tabindex="-1"><a class="header-anchor" href="#表达式"><span>表达式</span></a></h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>这是一个十分初期的<strong>实验性</strong>的功能，其可能会在接下来几个版本中<strong>频繁发生变动</strong>，且使用前建议对项目进行必要的<strong>备份</strong>。</p></div><p>使用 <kbd>0</kbd> 来输入表达式。</p><p>一个合法的表达式是由一系列运算符、数字与变量排列组合构成的一个有意义的式子，例如：<code>a=10+b*c</code>，<code>100&gt;90</code>等。</p><p>表达式支持基本的四则运算符 <code>+,-,*,/,%</code>，位运算符 <code>&lt;&lt;,&gt;&gt;,|,&amp;</code>，逻辑运算符 <code>&amp;&amp;,||,!</code>，关系运算符 <code>&gt;,&lt;,&gt;=,&lt;=,==,!=</code>，赋值 <code>=</code> 等。</p><p>你可以以符合直觉的方式以类似C语言的语法来撰写该表达式，一些合法的表达式例子如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // a=900</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">              // b=900</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">           // b=(a=20)，右结合</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">c</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       // c=(10*20)/20，左结合</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以通过表达式的计算来批量修改全部音符/选中音符的属性。</p><p>当前支持的属性变量见下表：</p><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:center;">作用</th><th style="text-align:center;">单位</th><th style="text-align:center;">音符限制</th></tr></thead><tbody><tr><td style="text-align:center;">time</td><td style="text-align:center;">音符所在的时间</td><td style="text-align:center;">ms</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">pos</td><td style="text-align:center;">音符所在的位置</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">wid</td><td style="text-align:center;">音符的宽度</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">len</td><td style="text-align:center;">音符的持续时间</td><td style="text-align:center;">ms</td><td style="text-align:center;">HOLD</td></tr><tr><td style="text-align:center;">htime</td><td style="text-align:center;">音符头部的所在时间</td><td style="text-align:center;">ms</td><td style="text-align:center;">HOLD</td></tr><tr><td style="text-align:center;">etime</td><td style="text-align:center;">音符尾部的所在时间</td><td style="text-align:center;">ms</td><td style="text-align:center;">HOLD</td></tr></tbody></table><p>表达式在每个音符上的计算是独立的。表达式计算的过程可以概括如下：</p><ul><li>根据音符的属性初始化表达式的变量。</li><li>计算表达式，中途表达式的变量产生变化。</li><li>读取表达式的变量，根据变量的变化修改音符的属性。</li></ul><p>在 DyNode 中，输入的表达式以 <code>;</code> 分隔，他们将依次按顺序执行。变量的存储类型为双精度浮点数。</p><p>特别的，一些变量存在音符限制，这意味着他们只在一部分音符上能够生效。所有表达式的计算都将忽略 SUB 类型的音符（HOLD 尾部音符），详见 <a href="#hold-%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BF%AE%E6%94%B9">HOLD 属性的修改</a> 。</p><p>下面是一些表达式的合法实例，其中一行代表一个例子：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">wid</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">wid</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                   // 音符的宽度翻倍</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pos</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2.5</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                     // 音符的位置全部设置为2.5</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">time</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">time</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                // 音符的所在时间+10ms（添加音符延迟）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pos</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2.5</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pos</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">               // 将音符按照屏幕的中线进行对称（屏幕中线的位置为2.5）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">time</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">time</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;len</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">len</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.5</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 谱面1.5倍速（所有音符的时间除以1.5，所有HOLD的长度除以1.5）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;time</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                 // 定义变量a，并将a赋值给time</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hold-属性的修改" tabindex="-1"><a class="header-anchor" href="#hold-属性的修改"><span>HOLD 属性的修改</span></a></h3><p>所有表达式的计算都将忽略 SUB 类型的音符，取而代之的是针对 HOLD 类型的音符存在一些特殊的属性变量。</p><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:center;">作用</th><th style="text-align:center;">单位</th></tr></thead><tbody><tr><td style="text-align:center;">len</td><td style="text-align:center;">音符的持续时间</td><td style="text-align:center;">ms</td></tr><tr><td style="text-align:center;">htime</td><td style="text-align:center;">音符头部的所在时间</td><td style="text-align:center;">ms</td></tr><tr><td style="text-align:center;">etime</td><td style="text-align:center;">音符尾部的所在时间</td><td style="text-align:center;">ms</td></tr></tbody></table><p>这意味着当你修改 HOLD 的 <code>time</code> 属性时，它实际不会修改 HOLD 的持续时间，也即修改 <code>time</code> 意味着将 HOLD 进行整体的移动而非头部与尾部分别进行修改。</p><p>如果你想实现头部与尾部分别进行修改，你需要修改 <code>htime</code> 与 <code>etime</code> 属性，而非 <code>time</code> 属性。</p><p>你可能发现这三个属性实际上会产生冲突，即若你修改了 <code>htime</code> 与 <code>etime</code>，那么 <code>len</code> 属性理论上也会发生变化，但当前在表达式的计算过程中变量不会绑定，也即一个变量不会因为另一个变量的变动而变动。</p><p>在实际的操作中，我们不推荐你在一个表达式中同时出现两个与 HOLD 属性相关的变量。以下是 DyNode 对 HOLD 属性相关变量冲突的处理方法：</p><ul><li>若 <code>time</code> 属性与 <code>htime</code> 属性同时被修改，<code>htime</code> 的修改将覆盖 <code>time</code> 的修改。</li><li>若 <code>len</code> 属性与 <code>etime</code> 属性同时被修改，<code>len</code> 的修改将覆盖 <code>etime</code> 的修改。</li></ul><p>下面是一些合法的修改 HOLD 属性的表达式例子：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">htime</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">htime</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;etime</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">etime</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       // 所有HOLD音符的头部时间+10，所有HOLD音符的尾部时间-10</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">len</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">len</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                           // 所有HOLD的持续时间除以2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">htime</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                           // 修改所有HOLD音符的头部时间为100</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">htime</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;len</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                   // 等价于 time=100;len=100</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28)]))}const p=s(l,[["render",n],["__file","advanced-edit.html.vue"]]),r=JSON.parse('{"path":"/guide/advanced-edit.html","title":"高级功能","lang":"zh-CN","frontmatter":{"description":"高级功能 本页面讲解 DyNode 包含的进阶编辑功能。 表达式 注意 这是一个十分初期的实验性的功能，其可能会在接下来几个版本中频繁发生变动，且使用前建议对项目进行必要的备份。 使用 0 来输入表达式。 一个合法的表达式是由一系列运算符、数字与变量排列组合构成的一个有意义的式子，例如：a=10+b*c，100>90等。 表达式支持基本的四则运算符 +...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://dyn.iorinn.moe/en/guide/advanced-edit.html"}],["meta",{"property":"og:url","content":"https://dyn.iorinn.moe/guide/advanced-edit.html"}],["meta",{"property":"og:site_name","content":"DyNode"}],["meta",{"property":"og:title","content":"高级功能"}],["meta",{"property":"og:description","content":"高级功能 本页面讲解 DyNode 包含的进阶编辑功能。 表达式 注意 这是一个十分初期的实验性的功能，其可能会在接下来几个版本中频繁发生变动，且使用前建议对项目进行必要的备份。 使用 0 来输入表达式。 一个合法的表达式是由一系列运算符、数字与变量排列组合构成的一个有意义的式子，例如：a=10+b*c，100>90等。 表达式支持基本的四则运算符 +..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-06-11T15:22:27.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-11T15:22:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"高级功能\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-11T15:22:27.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"表达式","slug":"表达式","link":"#表达式","children":[{"level":3,"title":"HOLD 属性的修改","slug":"hold-属性的修改","link":"#hold-属性的修改","children":[]}]}],"git":{"createdTime":1686489096000,"updatedTime":1686496947000,"contributors":[{"name":"Rin","username":"Rin","email":"31349569+NagaseIori@users.noreply.github.com","commits":2,"url":"https://github.com/Rin"}]},"readingTime":{"minutes":3.73,"words":1120},"filePathRelative":"guide/advanced-edit.md","localizedDate":"2023年6月11日","autoDesc":true}');export{p as comp,r as data};
